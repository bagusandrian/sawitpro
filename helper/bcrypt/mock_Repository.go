// Code generated by mockery v2.23.2. DO NOT EDIT.

package bcrypt

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// ComparePassword provides a mock function with given fields: password, passwordHash
func (_m *MockRepository) ComparePassword(password string, passwordHash string) bool {
	ret := _m.Called(password, passwordHash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(password, passwordHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GeneratePassword provides a mock function with given fields: password
func (_m *MockRepository) GeneratePassword(password string) string {
	ret := _m.Called(password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
